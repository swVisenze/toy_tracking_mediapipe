# MediaPipe graph that performs object detection with TensorFlow Lite on CPU.
# Used in the examples in
# mediapipe/examples/desktop/object_detection:object_detection_cpu.
profiler_config {
  trace_enabled: true
  enable_profiler: true
  trace_log_interval_count: 200
  trace_log_path: "./profile/m3l075_v3_dv4_av3_xnnpack"
}
# Images on CPU coming into and out of the graph.
# max_queue_size: -1
input_stream: "input_video"
output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for
# TfLiteTensorsToDetectionsCalculator downstream in the graph to finish
# generating the corresponding detections before it passes through another
# image. All images that come in while waiting are dropped, limiting the number
# of in-flight images between this calculator and
# TfLiteTensorsToDetectionsCalculator to 1. This prevents the nodes in between
# from queuing up incoming images and data excessively, which leads to increased
# latency and memory usage, unwanted in real-time mobile applications. It also
# eliminates unnecessarily computation, e.g., a transformed image produced by
# ImageTransformationCalculator may get dropped downstream if the subsequent
# TfLiteConverterCalculator or TfLiteInferenceCalculator is still busy
# processing previous inputs.
# node {
#   calculator: "OpenCvVideoDecoderCalculator"
#   input_side_packet: "INPUT_FILE_PATH:input_video_path"
#   output_stream: "VIDEO:input_video"
#   output_stream: "VIDEO_PRESTREAM:input_video_header"
# }

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_detections"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Transforms the input image on CPU to a 320x320 image. To scale the image, by
# default it uses the STRETCH scale mode that maps the entire input image to the
# entire transformed image. As a result, image aspect ratio may be changed and
# objects in the image may be deformed (stretched or squeezed), but the object
# detection model used in this graph is agnostic to that deformation.
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "IMAGE:transformed_input_video_cpu"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 384
      output_height: 384
    }
  }
}

# Converts the transformed input image on CPU into an image tensor stored as a
# TfLiteTensor.
node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE:transformed_input_video_cpu"
  output_stream: "TENSORS:image_tensor"
  options: {
     [mediapipe.TfLiteConverterCalculatorOptions.ext] {
       zero_center: false
       norms: 58.395
       norms: 57.12
       norms: 57.375
       means: 123.675
       means: 116.28
       means: 103.53
     }
  }
}

#Runs a TensorFlow Lite model on CPU that takes an image tensor and outputs a
#vector of tensors representing, for instance, detection boxes/keypoints and
#scores.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS:image_tensor"
  output_stream: "TENSORS:output_tensor"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path: "mediapipe/models/toy_detection_m3l075_2d_v4_dv4_av3.tflite"
      # model_path: "mediapipe/models/toy_detection_mobilenetv3_2d_v1_tf.tflite"
      # model_path: "mediapipe/models/toy_detection_mobilenetv2_small050_2d_v1_nopad.tflite"
      delegate { xnnpack {} }
      # output_tensor_index: 694   #wh 1,48,48,16
      # output_tensor_index: 684   #center_offset 1,48,48,2
      # output_tensor_index: 689   #heatmap 1,48,48,1
      # output_tensor_index: 690   #hmax 1,48,48,1
      # EfficientNet b1
      # output_tensor_index: 667   #wh2d 1,48,48,4
      # output_tensor_index: 673   #heatmap2d 1,48,48,1
      # output_tensor_index: 672   #h2dmax 1,48,48,1

      # TinyDSOD
      # output_tensor_index: 294   #wh2d 1,48,48,4
      # output_tensor_index: 297   #heatmap2d 1,48,48,1
      # output_tensor_index: 296   #h2dmax 1,48,48,1

      # MobileNet v3
      # output_tensor_index: 431  #wh2d 1,48,48,4
      # output_tensor_index: 433  #heatmap2d 1,48,48,1
      # output_tensor_index: 434  #h2dmax 1,48,48,1

      # MobileNet v3 - small
      # output_tensor_index: 396  #wh2d 1,48,48,4
      # output_tensor_index: 398  #heatmap2d 1,48,48,1
      # output_tensor_index: 399  #h2dmax 1,48,48,1

      # MobileNet v2 - small
      # output_tensor_index: 259  #wh2d 1,48,48,4
      # output_tensor_index: 261  #heatmap2d 1,48,48,1
      # output_tensor_index: 262  #h2dmax 1,48,48,1

      # MobileNet v3
      # output_tensor_index: 304  #wh2d 1,48,48,4
      # output_tensor_index: 306  #heatmap2d 1,48,48,1
      # output_tensor_index: 307  #h2dmax 1,48,48,1

      # MobileNet v2 small050 with pad
      # output_tensor_index: 256  #wh2d 1,48,48,4
      # output_tensor_index: 258  #heatmap2d 1,48,48,1
      # output_tensor_index: 259  #h2dmax 1,48,48,1

      # MobileNet v2 small050 with out pad
      # output_tensor_index: 228  #wh2d 1,48,48,4
      # output_tensor_index: 230  #heatmap2d 1,48,48,1
      # output_tensor_index: 231  #h2dmax 1,48,48,1

      # MobileNet v3 small 075
      # output_tensor_index: 365  #wh2d 1,48,48,4
      # output_tensor_index: 368  #heatmap2d 1,48,48,1
      # output_tensor_index: 367  #h2dmax 1,48,48,1

      # MobileNet v3 large 075
      output_tensor_index: 404  #wh2d 1,48,48,4
      output_tensor_index: 406  #heatmap2d 1,48,48,1
      output_tensor_index: 407  #h2dmax 1,48,48,1

    }
  }
}

node {
   calculator: "TfLiteTensorsToToyDetectionCalculator"
   input_stream: "TENSORS:output_tensor"
   output_stream: "DETECTIONS:filtered_detections"
   options: {
     [mediapipe.TfLiteTensorsToToyDetectionCalculatorOptions.ext] {
       num_boxes: 3
       num_landmarks: 8
       min_score_thresh: 0.1
       input_image_width: 384
       input_image_height: 384
       down_ratio: 8
     }
   }
}

node {
  calculator: "DetectionLabelIdToTextCalculator"
  input_stream: "filtered_detections"
  output_stream: "output_detections"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionLabelIdToTextCalculatorOptions] {
      label_map_path: "mediapipe/models/object_detection_labelmap.txt"
    }
  }
}

# Converts the detections to drawing primitives for annotation overlay.
node {
  calculator: "DetectionsToRenderDataCalculator"
  input_stream: "DETECTIONS:output_detections"
  output_stream: "RENDER_DATA:render_data"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
      thickness: 4.0
      color { r: 255 g: 0 b: 0 }
    }
  }
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "render_data"
  output_stream: "IMAGE:output_video"
}
